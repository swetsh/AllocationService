// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: proto/allocation.proto

package allocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AllocationServiceClient is the client API for AllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AllocationServiceClient interface {
	AssignOrderToDeliveryPerson(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
	UpdateOrderStatus(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error)
}

type allocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAllocationServiceClient(cc grpc.ClientConnInterface) AllocationServiceClient {
	return &allocationServiceClient{cc}
}

func (c *allocationServiceClient) AssignOrderToDeliveryPerson(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/AllocationService/AssignOrderToDeliveryPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *allocationServiceClient) UpdateOrderStatus(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/AllocationService/UpdateOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AllocationServiceServer is the server API for AllocationService service.
// All implementations must embed UnimplementedAllocationServiceServer
// for forward compatibility
type AllocationServiceServer interface {
	AssignOrderToDeliveryPerson(context.Context, *Order) (*Order, error)
	UpdateOrderStatus(context.Context, *Order) (*Order, error)
	mustEmbedUnimplementedAllocationServiceServer()
}

// UnimplementedAllocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAllocationServiceServer struct {
}

func (UnimplementedAllocationServiceServer) AssignOrderToDeliveryPerson(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignOrderToDeliveryPerson not implemented")
}
func (UnimplementedAllocationServiceServer) UpdateOrderStatus(context.Context, *Order) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOrderStatus not implemented")
}
func (UnimplementedAllocationServiceServer) mustEmbedUnimplementedAllocationServiceServer() {}

// UnsafeAllocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AllocationServiceServer will
// result in compilation errors.
type UnsafeAllocationServiceServer interface {
	mustEmbedUnimplementedAllocationServiceServer()
}

func RegisterAllocationServiceServer(s grpc.ServiceRegistrar, srv AllocationServiceServer) {
	s.RegisterService(&AllocationService_ServiceDesc, srv)
}

func _AllocationService_AssignOrderToDeliveryPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).AssignOrderToDeliveryPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AllocationService/AssignOrderToDeliveryPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).AssignOrderToDeliveryPerson(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _AllocationService_UpdateOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AllocationServiceServer).UpdateOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AllocationService/UpdateOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AllocationServiceServer).UpdateOrderStatus(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

// AllocationService_ServiceDesc is the grpc.ServiceDesc for AllocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AllocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AllocationService",
	HandlerType: (*AllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssignOrderToDeliveryPerson",
			Handler:    _AllocationService_AssignOrderToDeliveryPerson_Handler,
		},
		{
			MethodName: "UpdateOrderStatus",
			Handler:    _AllocationService_UpdateOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/allocation.proto",
}
